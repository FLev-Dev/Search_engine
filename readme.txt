
1. Укажите в файле config.json (находится в папке resourses) максимальное количество ответов в поле "max_responses".
2. В том же файле в поле "files" впишите имена ваших файлов(имена в кавычках, через запятую), в которых программа будет осуществлять поиск. Поместите сами файлы в папку "resourses\files for search".
	Примечание: предполагается что в файлах будут слова строчными латинскими буквами, разделенные запятыми.
3. В файл "requests.json" впишите ваши запросы строчными латинскими буквами. Слова должны разделяться пробелами, а запросы находиться в кавычках и разделяться запятыми.
4. Скомпилируйте и запустите проект. Результаты будут в файле "answers.json" в папке resourses.

Если вы не знаете как скомпилировать и запустить проект следуйте инструкции ниже:
	1. Установите Visual studio Code для удобного редактирования кода(https://code.visualstudio.com/download)
	2. Откройте расширения и установите расширение для C/C++(https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
		и для CMake (https://marketplace.visualstudio.com/items?itemName=twxs.cmake)
	3. Установите сам Cmake(https://cmake.org/download/)
	4. Установите MinGW. Инструкцию вы найдете под разделом "Installing the MinGW-w64 toolchain" (https://code.visualstudio.com/docs/cpp/config-mingw)
		Не забудьте проверить корректность работы в терминале командой "g++ --version" без кавычек. Должно написать вашу текущую версию.
	5. На этом установка закончена и можно перейти к настройке.
		A. Откройте файл CMakeLists.txt в корневой папке проекта и при необходимости измените путь к компиляторам на 18 и 19 строчке на ваш.
		B. Откройте терминал (командную строку) и перейдите в директорию проекта. (cd "ваш_путь\\search_engine")
		C. Введите последовательно команды без кавычек: "mkdir build", "cd build", " cmake .. -G "MinGW Makefiles" ".
			Этим вы создадите папку "build", перейдете в нее и скажете CMake создать собственную систему сборки.
		D. Вызовите эту систему сборки, чтобы скомпилировать проект (cmake --build .)
		E. Теперь в build/src появился исполняемый файл search_engine через который мы будем запускать проект.

Примечание: Если вы используете другой компилятор, ОС и тп., то можете при необходимости скорректировать путь к файлам в папке resourse. 
	Для этого измените в файле "Converter_JSON.h" строки 7 и 8 и повторите компиляцию.



						